---
  # Saw a bug with ansible 2.0, appeared VPC was created OK, but couldn't access instances
  # Upgraded to ansible 2.2 and issue was resolved.
  # Learned how to configure VPC referring to:
  # https://github.com/jeremievallee/ansible-aws-vpc/blob/master/1-simple-vpc/roles/vpc/tasks/main.yml
  - name:               Create VPC
    ec2_vpc_net:
      name:             "{{ vpc_name }}"
      cidr_block:       "{{ vpc_cidr_block }}"
      region:           "{{ aws_region }}"
      state:            "present"
    register: my_vpc

  - set_fact:
      vpc_id:           "{{ my_vpc.vpc.id }}"

  - name:               Create Public Subnet A
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "{{ vpc_subnet_a_cidr }}"
      az:               "{{ aws_region }}a"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "{{ vpc_subnet_a_name }}"
    register: my_public_subnet_a

  - set_fact:
      public_subnet_a_id: "{{ my_public_subnet_a.subnet.id }}"

  - name:               Create Public Subnet B
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "{{ vpc_subnet_b_cidr }}"
      az:               "{{ aws_region }}b"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "{{ vpc_subnet_b_name }}"
    register: my_public_subnet_b

  - set_fact:
      public_subnet_b_id: "{{ my_public_subnet_b.subnet.id }}"

  - name:               Create Internet Gateway for VPC
    ec2_vpc_igw:
      vpc_id:           "{{ vpc_id }}"
      region:           "{{ aws_region }}"
    register: my_vpc_igw

  - set_fact:
      igw_id:           "{{ my_vpc_igw.gateway_id }}"

  - name:               Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id:           "{{ vpc_id }}"
      region:           "{{ aws_region }}"
      tags:
        Name:           "{{ vpc_route_table_name }}"
      subnets:
        - "{{ public_subnet_a_id }}"
        - "{{ public_subnet_b_id }}"
      routes:
        - dest:         "0.0.0.0/0"
          gateway_id:   "{{ igw_id }}"

  - name:               Create Main Security Group
    ec2_group:
      name:             "{{ aws_sec_group_name }}"
      description:      "{{ aws_sec_group_name }}"
      vpc_id:           "{{ vpc_id }}"
      region:           "{{ aws_region }}"
      rules:
        - proto:        "tcp"
          from_port:    "22"
          to_port:      "22"
          cidr_ip:      "0.0.0.0/0"
        - proto:        "tcp"
          from_port:    "80"
          to_port:      "80"
          cidr_ip:      "0.0.0.0/0"
        - proto:        "tcp"
          from_port:    "443"
          to_port:      "443"
          cidr_ip:      "0.0.0.0/0"
        - proto:        "tcp"
          from_port:    "8443"
          to_port:      "8443"
          cidr_ip:      "0.0.0.0/0"
        - proto:        "tcp"
          from_port:    "5432"
          to_port:      "5432"
          cidr_ip:      "0.0.0.0/0"
    register: my_sec_group

  - name:  Create EC-2 Instance
    ec2:
      key_name: "{{ ssh_key_name }}"
      instance_type: "{{ instance_type }}"
      instance_tags:
        Name: "{{ instance_name }}"
      image: "{{ aws_ami_id }}"
      wait: yes
      exact_count: 1
      count_tag:
        Name: "{{ instance_name }}"
      group_id: "{{ my_sec_group.group_id }}"
      vpc_subnet_id: "{{ public_subnet_a_id }}"
      assign_public_ip: yes
      region: "{{ aws_region }}"
    register: my_ec2_instances

  - name: Create EBS Volume for /tmp
    ec2_vol:
      instance: "{{ my_ec2_instances.tagged_instances[0].id }}"
      volume_size: 50
      region: "{{ aws_region }}"
      device_name: "{{ tmp_ebs_device_name }}"
      delete_on_termination: yes

  - name: Create EBS Volume for docker_vg
    ec2_vol:
      instance: "{{ my_ec2_instances.tagged_instances[0].id }}"
      volume_size: 250
      region: "{{ aws_region }}"
      device_name: "{{ docker_vg_ebs_device_name }}"
      delete_on_termination: yes

  - name: Create EBS Volume for /var/lib/docker
    ec2_vol:
      instance: "{{ my_ec2_instances.tagged_instances[0].id }}"
      volume_size: 100
      region: "{{ aws_region }}"
      device_name: "{{ var_lib_docker_ebs_device_name }}"
      delete_on_termination: yes

  - name: Create EBS Volume for /persistedvolumes
    ec2_vol:
      instance: "{{ my_ec2_instances.tagged_instances[0].id }}"
      volume_size: 100
      region: "{{ aws_region }}"
      device_name: "{{ persistedvol_ebs_device_name }}"
      delete_on_termination: yes

  - name: Associate Elastic IP
    ec2_eip:
      device_id: "{{ my_ec2_instances.tagged_instances[0].id }}"
      region: "{{ aws_region }}"
      in_vpc: yes
      reuse_existing_ip_allowed: yes
    register: my_eip

  - name: Set DNS Record '{{ target_subdomain }}.{{ target_dns_zone }}' for New Instance to Elastic IP {{ my_eip.public_ip }}
    route53: >
      command=create
      zone="{{ target_dns_zone }}"
      record="{{ target_subdomain }}.{{ target_dns_zone }}"
      type=A
      ttl=60
      overwrite=yes
      value="{{ my_eip.public_ip }}"

  - name: Set DNS Record '*.{{ target_subdomain }}.{{ target_dns_zone }}' to Elastic IP {{ my_eip.public_ip }}
    route53: >
      command=create
      zone="{{ target_dns_zone }}"
      record="*.{{ target_subdomain }}.{{ target_dns_zone }}"
      type=A
      ttl=60
      overwrite=yes
      value="{{ my_eip.public_ip }}"

  - name: Create RDS Subnet Group with {{ vpc_subnet_a_name }} and {{ vpc_subnet_b_name }}
    rds_subnet_group:
      state: present
      name: "{{ rds_subnet_group_name }}"
      region: "{{ aws_region }}"
      description: RDS Subnet Group for {{ aws_tag_prefix }}
      subnets:
        - "{{ public_subnet_a_id }}"
        - "{{ public_subnet_b_id }}"

  - name: Wait for SSH to come up on {{ my_eip.public_ip }}
    wait_for:
      host: "{{ my_eip.public_ip }}"
      port: 22
      delay: 0
      timeout: 320
      state: started

  # Setting as a fact so we can read it later out of this role
  - name: Settings facts of ec2 instance to be read later
    set_fact:
      ec2_instances: "{{ my_ec2_instances }}"
      elastic_ip: "{{ my_eip }}"
